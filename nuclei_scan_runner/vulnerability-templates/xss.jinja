# Description
Cross-Site Scripting (XSS) attacks are a type of injection, in which malicious scripts are injected into otherwise benign and trusted websites. XSS attacks occur when an attacker uses a web application to send malicious code, generally in the form of a browser side script, to a different end user. Flaws that allow these attacks to succeed are quite widespread and occur anywhere a web application uses input from a user within the output it generates without validating or encoding it.

# Impact 
An attacker can use XSS to send a malicious script to an unsuspecting user. The end userâ€™s browser has no way to know that the script should not be trusted, and will execute the script. Because it thinks the script came from a trusted source, the malicious script can access any cookies, session tokens, or other sensitive information retained by the browser and used with that site. These scripts can even rewrite the content of the HTML page.

# Steps to reproduce
1. Visit {{ payload_evidence }}
2. The alert box should appear to prove that the insertion of JavaScript is possible.

The infected parameter/input endpoint is {{ payload_endpoint }}.

# Remediation
We suggest following best-practices defined in the OWASP cheatsheet referenced below in the Sources section. Static code analysis can be used to discover security issues during the development process:
- Security Code Scan (.NET, free): https://security-code-scan.github.io
- Bandit (Python, free): https://github.com/PyCQA/bandit
- Snyk (various, commercial): https://snyk.io/product/snyk-code/

 In general, it is good to set up these defenses:
- HTML sanitization / Output encoding
- Content security policy
- Web application firewalls

# Sources
- https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html
- https://owasp.org/www-community/attacks/xss/
- https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP#mitigating_cross-site_scripting

# {{ tool }} summary
{{ tool_output }}