# Description
SQL injection attack occurs when the program processes inputs in an unsafe manner. Maliciously crafted inputs can make the database execute commands and reveal sensitive information.

# Impact 
A successful SQL injection exploit can read sensitive data from the database, modify database data (Insert/Update/Delete), execute administration operations on the database (such as shutdown the DBMS), recover the content of a given file present on the DBMS file system and in some cases issue commands to the operating system. [^1]

[^1]: https://owasp.org/www-community/attacks/SQL_Injection

# Steps to reproduce
1. Visit {{ payload_evidence }}
2. Notice an SQL error caused by erroneous handling of inputs.

The infected parameter/input endpoint is {{ payload_endpoint }}.

# Remediation
Based on owasp cheatsheet it is good to implement the following:
- Primary Defenses:
    1. Use of Prepared Statements (with Parameterized Queries)
    2. Use of Properly Constructed Stored Procedures
    3. Allow-list Input Validation
    4. Escaping All User Supplied Input
- Additional Defenses:
    - Enforcing Least Privilege
    - Performing Allow-list Input Validation as a Secondary Defense
    - Perform static code analysis to automatically discover similar security issues

# Sources
- https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html
- https://owasp.org/www-community/attacks/SQL_Injection

# {{ tool }} summary
{{ tool_output }}
